

// Vertex shader
const vertexShaderSource = `
attribute vec3 vertex;
attribute vec3 normal;
uniform mat4 ModelViewProjectionMatrix;
varying vec3 vV;
varying vec3 vN;
void main() {
    vV = vertex;
    vN = normal;
    gl_Position = ModelViewProjectionMatrix * vec4(vertex,1.0);
}`;


// Fragment shader
const fragmentShaderSource = `
#ifdef GL_FRAGMENT_PRECISION_HIGH
   precision highp float;
#else
   precision mediump float;
#endif
varying vec3 vV;
varying vec3 vN;
uniform vec3 uP;
uniform vec3 uD;
uniform float uR;
uniform float uF;
uniform vec4 color;
void main() {
    vec3 toLight = normalize(uP-vV);
    vec3 toView = normalize(-vV);
    vec3 halfVector = normalize(toLight + toView);
    vec3 N = normalize(vN);
    float dotFromDirection = dot(toLight, 
                               -uD);
    float inLight = smoothstep(uR-uF,uR, dotFromDirection);
    float light = inLight * dot(N, toLight);
    float specular = inLight * pow(dot(N, halfVector), 100.0);
    vec3 color3 = color.rgb*light+specular;
    gl_FragColor = vec4(color3,1.0);
    if(uF<0.0){
        gl_FragColor = vec4(1.0);
    }
}`;